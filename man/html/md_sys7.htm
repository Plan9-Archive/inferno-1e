<html><head><title>Limbo<br>System Module</title></head>
<body bgcolor=white>
 
<a href="index.htm"><img src="Top.gif" alt="[Top]" align=bottom></a> <a href="md_sys6.htm"><img src="Previous.gif" alt="[Prev]" align=bottom></a> <a href="md_sys8.htm"><img src="Next.gif" alt="[Next]" align=bottom></a> 
<hr><br>
 
<a name="844846">
<center><h1> file2chan - <a creating: file connected to Limbo channel; file operations:creating:file connected to Limbo channel>create file connected to Limbo channel</h1></center>
</a><pre><tt>include "sys.m";
sys:= load Sys Sys-&gt;PATH;
Rread: type chan of (array of byte, string);
Rwrite: type chan of (int,          string);
FileIO: adt
{
    read:  chan of (int, int,           int, Rread);
    write: chan of (int, array of byte, int, Rwrite);
};
file2chan: fn(dir, file: string, flags: int): ref FileIO;
</tt></pre></p><a name="844860">
<h2> Description</h2>
</a><a name="844861">
The <em>file2chan</em> function provides an interface for creating a Limbo channel and an associated entry (<em>file</em>) in the file name space. A <em>client</em> communicates with the server using <em>open</em>, <em>read</em> and <em>write</em>. The system transforms the client's file operations into tuples that are delivered to the server on the channel associated with <em>file</em>. When the server responds, the client's file operations complete.<p>
</a><a name="844862">
Although <em>file</em> semantics are used, the goal does not have to be the creation of a server to replicate the duties of existing file systems (for example, persistent storage of data). The server can be designed to provide new services.<p>
</a><a name="844863">
<h3> file2chan (dir, file, flags)</h3>
</a><a name="844864">
The <em>file2chan</em> function returns a <em>FileIO</em> type holding two channels used by the system to deliver <em>Tread</em> and <em>Twrite</em> Styx messages to the server. See <a href="i_modu.htm#840761"><em>Introduction to Limbo Modules</em> in Chapter &#32;7</a>. The arguments are: 
<Table Border="3">
<caption></caption>
<tr><td><a name="844870">
dir<p>
</a><td><a name="844872">
The existing directory where the <em>file</em> is to be created.<p>
</a>
<tr><td><a name="844874">
file<p>
</a><td><a name="844876">
The <em>file</em> created by <em>file2chan</em>. It is held in a directory containing just that one file unioned in <em>dir</em>.<p>
</a>
<tr><td><a name="844878">
flags<p>
</a><td><a name="844880">
The <em>flags</em> argument specifies how that union is created. See <em><a href="md_sys1.htm#844542"></em><em>bind, mount, unmount - change file name space</em><em></a> </em>for a description of the flags.<p>
</a>

</Table>

<Table>
<tr><td>
</Table>
<p>
</a><a name="844884">
<h3> Reads</h3>
</a><a name="844885">
When the client invokes the read <em>system</em> call on the file, the server receives a tuple,<em> (offset, count, fid, rc)</em>, on the <em>read</em> channel of returned <em>ref &#32;FileIO</em>. The server should interpret that request as follows: 
<Table Border="3">
<caption></caption>
<tr><td><a name="844888">
offset<p>
</a><td><a name="844890">
The offset from the beginning of the file.<p>
</a>
<tr><td><a name="844892">
count<p>
</a><td><a name="844894">
The size of the data request.<p>
</a>
<tr><td><a name="844896">
fid<p>
</a><td><a name="844898">
An unique identifier for managing multiplexed requests on <em>file</em>.<p>
</a>
<tr><td><a name="844900">
rc<p>
</a><td><a name="844902">
The channel for delivery of the requested data.<p>
</a>

</Table>

<Table>
<tr><td>
</Table>
<p>
</a><a name="844903">
To allow the client to complete its <em>read</em> request successfully, the server should respond by sending into <em>rc</em> a tuple,<em> (data, &#32;nil)</em>, where <em>data</em> satisfies the client's request.<p>
</a><a name="844904">
To create an unsuccessful <em>read</em> request for the client, the server should respond on <em>rc</em> with a tuple,(<em>nil, &#32;errmsg</em>), where <em>errmsg</em> is a string describing the error condition. The <em>errmsg</em> string becomes the system error for the client (See <a href="md_sys11.htm#845119"><em>print, fprint, sprint - print formatted output</em></a>).<p>
</a><a name="844908">
The client blocks in its <em>read</em> system call until the server sends its reply.<p>
</a><a name="844909">
<h3> Writes </h3>
</a><a name="850376">
When the client does a <em>write</em> system call on the file, the server receives a tuple, (<em>offset, &#32;data, &#32;fid, &#32;wc</em>), on the <em>write </em>channel of the returned <em>ref &#32;FileIO</em>. That request should be interpreted as follows: 
<Table Border="3">
<caption></caption>
<tr><td><a name="850379">
offset<p>
</a><td><a name="850381">
The offset from the beginning of the file where the <em>data</em> should be written.<p>
</a>
<tr><td><a name="850383">
data<p>
</a><td><a name="850385">
The data to be written into the file.<p>
</a>
<tr><td><a name="850387">
fid<p>
</a><td><a name="850389">
An unique identifier for managing multiplexed requests on <em>file</em>.<p>
</a>
<tr><td><a name="850391">
wc<p>
</a><td><a name="850393">
A channel for delivery of a write-response message.<p>
</a>

</Table>

<Table>
<tr><td>
</Table>
<p>
</a><a name="844928">
The server should respond with a tuple (<em>count, &#32;string</em>) on <em>wc, </em>the<em> </em>channel received in the tuple from the <em>write </em>channel. To indicate a successful <em>write</em> operation to the client the server's response should be<kbd> </kbd>(<em>count, &#32;nil</em>), where <em>count</em> is the number of bytes (for example,<em> len &#32;data</em>) received from the client.<p>
</a><a name="844929">
To make the client's<em> write</em> request fail, the server's response should be<kbd> </kbd>(<em>0, &#32;errmsg</em>), where <em>errmsg</em> describes the problem. The <em>errmsg</em> string becomes the system error for the client (See <a href="md_sys11.htm#845119"><em>print, fprint, sprint - print formatted output</em></a>).<p>
</a><a name="844933">
The client blocks in its <em>write</em> system call until the server sends its reply.<p>
</a><a name="844934">
<h3> Closes </h3>
</a><a name="844935">
When file is closed for reading (writing), the server will receive a <em>read</em> (<em>write</em>) message with a <em>nil rc</em> (<em>wc</em>). The server can use these events to determine when to stop processing for a given <em>fid</em>.<p>
</a><a name="844936">
<h3> Fid's</h3>
</a><a name="844937">
The <em>fid</em> received by the server can be used to manage the multiplexing of multiple active clients sharing a single file. See <a href="i_modu.htm#840761"><em>Introduction to Limbo Modules</em> in Chapter &#32;7</a> for details.<p>
</a><a name="844961">
<h2> Caveat</h2>
</a><a name="844962">
The <em>read</em> and <em>write </em>system calls for the file will not return until the server sends its reply on the appropriate channel. Consequently, the process doing the <em>read</em> or <em>write</em> should not be the one serving, to avoid deadlock.<p>
</a><a name="848904">
<h2> See Also 
<Table Border="3">
<caption></caption>
<tr><td><a name="851025">
<a href="md_sys.htm#847453"><em>Limbo System Module</em></a><p>
</a>
<tr><td><a name="851027">
<a href="md_sys1.htm#844542"><em>bind, mount, unmount - change file name space</em></a><p>
</a>
<tr><td><a name="851029">
<a href="md_sys9.htm#844990"><em>open, create - open/create a file for reading or writing</em></a><p>
</a>
<tr><td><a name="851031">
<a href="md_sys12.htm#845197"><em>read, write, stream - read, write, or stream file</em></a><p>
</a>
<tr><td><a name="851033">
<a href="md_sys11.htm#845119"><em>print, fprint, sprint - print formatted output</em></a><p>
</a>
<tr><td><a name="851035">
<em><a href="i_modu.htm#840761"></em><em>Introduction to Limbo Modules</em> in Chapter &#32;7<em></a></em><p>
</a>

</Table>

<Table>
<tr><td>
</Table>
</h2>
</a>
<hr><br>
 
<a href="index.htm"><img src="Top.gif" alt="[Top]" align=bottom></a> <a href="md_sys6.htm"><img src="Previous.gif" alt="[Prev]" align=bottom></a> <a href="md_sys8.htm"><img src="Next.gif" alt="[Next]" align=bottom></a> 
<hr><br>



<address>
<a href="mailto:infernosupport@lucent.com">infernosupport@lucent.com</a>
</address>

<i>Copyright &#169; 1996,Lucent Technologies, Inc.   All rights
reserved.</i>


<!-- Last updated: 02/08/97 11:48:35 -->

</body>
</html>
